/**
 * This file is autogenerated by Scaffold-Stark.
 * You should not edit it manually or your changes might be overwritten.
 */

const deployedContracts = {
  devnet: {
    CrossChainCrowdfundL2: {
      address:
        "0x02dd669adaa6bbdd665a351c04a137ee6a7fa3bb3204f84037fcf8d933c387cc",
      abi: [
        {
          type: "impl",
          name: "CrossChainCrowdfundL2Impl",
          interface_name:
            "contracts::CrossChainCrowdfundL2::ICrossChainCrowdfundL2",
        },
        {
          type: "struct",
          name: "core::integer::u256",
          members: [
            {
              name: "low",
              type: "core::integer::u128",
            },
            {
              name: "high",
              type: "core::integer::u128",
            },
          ],
        },
        {
          type: "struct",
          name: "core::byte_array::ByteArray",
          members: [
            {
              name: "data",
              type: "core::array::Array::<core::bytes_31::bytes31>",
            },
            {
              name: "pending_word",
              type: "core::felt252",
            },
            {
              name: "pending_word_len",
              type: "core::integer::u32",
            },
          ],
        },
        {
          type: "interface",
          name: "contracts::CrossChainCrowdfundL2::ICrossChainCrowdfundL2",
          items: [
            {
              type: "function",
              name: "create_campaign",
              inputs: [
                {
                  name: "target_amount",
                  type: "core::integer::u256",
                },
                {
                  name: "time_left",
                  type: "core::integer::u256",
                },
                {
                  name: "token",
                  type: "core::starknet::contract_address::ContractAddress",
                },
                {
                  name: "data_cid",
                  type: "core::byte_array::ByteArray",
                },
              ],
              outputs: [],
              state_mutability: "external",
            },
            {
              type: "function",
              name: "get_campaign_counter",
              inputs: [],
              outputs: [
                {
                  type: "core::integer::u256",
                },
              ],
              state_mutability: "view",
            },
            {
              type: "function",
              name: "get_campaign_cid",
              inputs: [
                {
                  name: "campaign_id",
                  type: "core::integer::u256",
                },
              ],
              outputs: [
                {
                  type: "core::byte_array::ByteArray",
                },
              ],
              state_mutability: "view",
            },
            {
              type: "function",
              name: "get_campaign_token",
              inputs: [
                {
                  name: "campaign_id",
                  type: "core::integer::u256",
                },
              ],
              outputs: [
                {
                  type: "core::starknet::contract_address::ContractAddress",
                },
              ],
              state_mutability: "view",
            },
            {
              type: "function",
              name: "get_campaign_data_cid",
              inputs: [
                {
                  name: "campaign_id",
                  type: "core::integer::u256",
                },
              ],
              outputs: [
                {
                  type: "(core::integer::u256, core::integer::u256, core::integer::u256, core::integer::u8)",
                },
              ],
              state_mutability: "view",
            },
          ],
        },
        {
          type: "impl",
          name: "OwnableImpl",
          interface_name: "openzeppelin::access::ownable::interface::IOwnable",
        },
        {
          type: "interface",
          name: "openzeppelin::access::ownable::interface::IOwnable",
          items: [
            {
              type: "function",
              name: "owner",
              inputs: [],
              outputs: [
                {
                  type: "core::starknet::contract_address::ContractAddress",
                },
              ],
              state_mutability: "view",
            },
            {
              type: "function",
              name: "transfer_ownership",
              inputs: [
                {
                  name: "new_owner",
                  type: "core::starknet::contract_address::ContractAddress",
                },
              ],
              outputs: [],
              state_mutability: "external",
            },
            {
              type: "function",
              name: "renounce_ownership",
              inputs: [],
              outputs: [],
              state_mutability: "external",
            },
          ],
        },
        {
          type: "constructor",
          name: "constructor",
          inputs: [
            {
              name: "owner",
              type: "core::starknet::contract_address::ContractAddress",
            },
          ],
        },
        {
          type: "struct",
          name: "contracts::CrossChainCrowdfundL2::L1Campaign",
          members: [
            {
              name: "targetAmount",
              type: "core::felt252",
            },
            {
              name: "token",
              type: "core::felt252",
            },
            {
              name: "timeLeft",
              type: "core::felt252",
            },
            {
              name: "creator",
              type: "core::felt252",
            },
          ],
        },
        {
          type: "l1_handler",
          name: "create_campaign_from_l1",
          inputs: [
            {
              name: "from_address",
              type: "core::felt252",
            },
            {
              name: "l1_campaign",
              type: "contracts::CrossChainCrowdfundL2::L1Campaign",
            },
          ],
          outputs: [],
          state_mutability: "external",
        },
        {
          type: "event",
          name: "openzeppelin::access::ownable::ownable::OwnableComponent::OwnershipTransferred",
          kind: "struct",
          members: [
            {
              name: "previous_owner",
              type: "core::starknet::contract_address::ContractAddress",
              kind: "key",
            },
            {
              name: "new_owner",
              type: "core::starknet::contract_address::ContractAddress",
              kind: "key",
            },
          ],
        },
        {
          type: "event",
          name: "openzeppelin::access::ownable::ownable::OwnableComponent::OwnershipTransferStarted",
          kind: "struct",
          members: [
            {
              name: "previous_owner",
              type: "core::starknet::contract_address::ContractAddress",
              kind: "key",
            },
            {
              name: "new_owner",
              type: "core::starknet::contract_address::ContractAddress",
              kind: "key",
            },
          ],
        },
        {
          type: "event",
          name: "openzeppelin::access::ownable::ownable::OwnableComponent::Event",
          kind: "enum",
          variants: [
            {
              name: "OwnershipTransferred",
              type: "openzeppelin::access::ownable::ownable::OwnableComponent::OwnershipTransferred",
              kind: "nested",
            },
            {
              name: "OwnershipTransferStarted",
              type: "openzeppelin::access::ownable::ownable::OwnableComponent::OwnershipTransferStarted",
              kind: "nested",
            },
          ],
        },
        {
          type: "event",
          name: "contracts::CrossChainCrowdfundL2::CrossChainCrowdfundL2::ValueReceived",
          kind: "struct",
          members: [
            {
              name: "l1_address",
              type: "core::felt252",
              kind: "key",
            },
            {
              name: "value",
              type: "core::felt252",
              kind: "data",
            },
          ],
        },
        {
          type: "event",
          name: "contracts::CrossChainCrowdfundL2::CrossChainCrowdfundL2::StructReceived",
          kind: "struct",
          members: [
            {
              name: "l1_address",
              type: "core::felt252",
              kind: "key",
            },
            {
              name: "data_a",
              type: "core::felt252",
              kind: "data",
            },
            {
              name: "data_b",
              type: "core::felt252",
              kind: "data",
            },
          ],
        },
        {
          type: "event",
          name: "contracts::CrossChainCrowdfundL2::CrossChainCrowdfundL2::Event",
          kind: "enum",
          variants: [
            {
              name: "OwnableEvent",
              type: "openzeppelin::access::ownable::ownable::OwnableComponent::Event",
              kind: "flat",
            },
            {
              name: "ValueReceivedFromL1",
              type: "contracts::CrossChainCrowdfundL2::CrossChainCrowdfundL2::ValueReceived",
              kind: "nested",
            },
            {
              name: "StructReceivedFromL1",
              type: "contracts::CrossChainCrowdfundL2::CrossChainCrowdfundL2::StructReceived",
              kind: "nested",
            },
          ],
        },
      ],
    },
  },
} as const;

export default deployedContracts;
